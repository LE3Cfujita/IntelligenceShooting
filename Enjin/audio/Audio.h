#pragma once

#include <Windows.h>
#include <xaudio2.h>
#include <wrl.h>
#include <unordered_map>
#include <string>

/// <summary>
/// オーディオコールバック
/// </summary>
class XAudio2VoiceCallback : public IXAudio2VoiceCallback
{
public:
    // ボイス処理パスの開始時
    //STDMETHOD_(void, OnVoiceProcessingPassStart) (THIS_ UINT32 BytesRequired) {};
    void OnVoiceProcessingPassStart(UINT32 BytesRequired) {};
    // ボイス処理パスの終了時
    STDMETHOD_(void, OnVoiceProcessingPassEnd) (THIS) {};
    // バッファストリームの再生が終了した時
    STDMETHOD_(void, OnStreamEnd) (THIS) {};
    // バッファの使用開始時
    STDMETHOD_(void, OnBufferStart) (THIS_ void* pBufferContext) {};
    // バッファの末尾に達した時
    STDMETHOD_(void, OnBufferEnd) (THIS_ void* pBufferContext) {
        // バッファを解放する
        delete[] pBufferContext;
    };
    // 再生がループ位置に達した時
    STDMETHOD_(void, OnLoopEnd) (THIS_ void* pBufferContext) {};
    // ボイスの実行エラー時
    STDMETHOD_(void, OnVoiceError) (THIS_ void* pBufferContext, HRESULT Error) {};

};
class Audio
{
private: // エイリアス
// Microsoft::WRL::を省略
    template <class T> using ComPtr = Microsoft::WRL::ComPtr<T>;
public: // サブクラス
    // チャンクヘッダ
    struct ChunkHeader
    {
        char id[4]; // チャンク毎のID
        int32_t size;  // チャンクサイズ
    };

    // RIFFヘッダチャンク
    struct RiffHeader
    {
        ChunkHeader chunk;   // "RIFF"
        char type[4]; // "WAVE"
    };

    // FMTチャンク
    struct FormatChunk
    {
        ChunkHeader chunk; // "fmt "
        WAVEFORMATEX fmt; // 波形フォーマット
    };

    // 音声データ
    struct SoundData
    {
        // 波形フォーマット
        WAVEFORMATEX wfex;
        // バッファの先頭アドレス
        BYTE* pBuffer;

        // バッファのサイズ
        unsigned int bufferSize;
    };

public: //メンバ関数
    bool Initialize();

    /// <summary>
    /// サウンド読み込み(.wav)
    /// </summary>
    /// <param name="filename">ファイル名</param>
    void SoundLoadWave(const char* filename, float number);

    /// <summary>
    /// 
    /// </summary>
    void SoundUnload();

    /// <summary>
    /// サウンド再生(.wav)
    /// </summary>
    /// <param name="filename">ファイル名</param>
    /// <param name="loopFlag">ループするか否か</param>
    void SoundPlayWave(const char* filename, bool loopFlag);

    /// <summary>
    /// サウンド停止(.wav)
    /// </summary>
    /// <param name="filename">ファイル名</param>
    void SoundStop(const char* filename);

    void SoundVolume(int number,float volume);

private: // メンバ変数
    ComPtr<IXAudio2>xAudio2;
    IXAudio2MasteringVoice* masterVoice;
    XAudio2VoiceCallback voiceCallback;
    std::unordered_map<std::string, SoundData> soundDatas;
    std::unordered_map<std::string, IXAudio2SourceVoice*> sourceVoices;

    const std::string baseDirectory = "Resources/Audio/";
};